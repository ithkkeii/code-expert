import { Challenge, PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const genSlug = (title: string) =>
  title.toLowerCase().replace('(', '').replace(')', '').split(' ').join('-');

const easyChallenges: Omit<Challenge, 'slug'>[] = [
  {
    id: 1,
    title: 'Two Sum',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a, b) => {}',
    rightSolution: '',
  },
  {
    id: 2,
    title: 'Palindrome Number',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 3,
    title: 'Roman to Integer',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 4,
    title: 'Longest Common Prefix',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 5,
    title: 'Valid Parentheses',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 6,
    title: 'Merge Two Sorted Lists',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 7,
    title: 'Remove Duplicates from Sorted Array',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 8,
    title: 'Remove Element',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 9,
    title: 'Search Insert Position',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 10,
    title: 'Length of Last Word',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 11,
    title: 'Remove Duplicates from Sorted List',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 12,
    title: 'Climbing Stairs',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 13,
    title: 'Binary Tree Inorder Traversal',
    point: 100,
    level: 'Easy',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
];

const mediumChallenges: Omit<Challenge, 'slug'>[] = [
  {
    id: 14,
    title: 'Add Two Numbers',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 15,
    title: 'Longest Substring Without Repeating Characters',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 16,
    title: 'Longest Palindromic Substring',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 17,
    title: 'Zigzag Conversion',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 18,
    title: 'Reverse Integer',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 19,
    title: 'String to Integer (atoi)',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 20,
    title: 'Container With Most Water',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 21,
    title: 'Integer to Roman',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 22,
    title: '3Sum',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 23,
    title: '3Sum Closest',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 24,
    title: 'Letter Combinations of a Phone Number',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 25,
    title: '4Sum',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 26,
    title: 'Remove Nth Node From End of List',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 27,
    title: 'Generate Parentheses',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 28,
    title: 'Swap Nodes in Pairs',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 29,
    title: 'Find the Index of the First Occurrence in a String',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 30,
    title: 'Divide Two Integers',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 31,
    title: 'Next Permutation',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 32,
    title: 'Search in Rotated Sorted Array',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 33,
    title: 'Find First and Last Position of Element in Sorted Array',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 34,
    title: 'Count and Say',
    point: 200,
    level: 'Medium',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
];

const hardChallenges: Omit<Challenge, 'slug'>[] = [
  {
    id: 35,
    title: 'Median of Two Sorted Arrays',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 36,
    title: 'Regular Expression Matching',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 37,
    title: 'Merge k Sorted Lists',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 38,
    title: 'Reverse Nodes in k-Group',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 39,
    title: 'Substring with Concatenation of All Words',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 40,
    title: 'Longest Valid Parentheses',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 41,
    title: 'First Missing Positive',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 42,
    title: 'Trapping Rain Water',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 43,
    title: 'N-Queens',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 44,
    title: 'N-Queens 2',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 45,
    title: 'Permutation Sequence',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 46,
    title: 'Valid Number',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 47,
    title: 'Text Justification',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
  {
    id: 48,
    title: 'Edit Distance',
    point: 300,
    level: 'Hard',
    seed: 'const main = (a) => {}',
    rightSolution: '',
  },
];

const main = async () => {
  await prisma.challenge.createMany({
    data: [...easyChallenges, ...mediumChallenges, ...hardChallenges].map(
      (c) => ({
        ...c,
        slug: genSlug(c.title),
      }),
    ),
  });
};

main();
