{
	"extends": [
		"airbnb",
		"airbnb-typescript",
		"airbnb/hooks",
		"plugin:react/recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking",
		"plugin:prettier/recommended"
	],
	"plugins": [
		"@typescript-eslint"
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"project": "./tsconfig.json",
		"ecmaFeatures": {
			"jsx": true
		},
		"ecmaVersion": 12,
		"sourceType": "module"
	},
	"rules": {
		"react/function-component-definition": [2, { "namedComponents": "arrow-function" }],
		// Using typescript to validate props & defaultProps is deprecated in function components.
    "react/require-default-props": "off",
    // Remove "object" because cannot provide React.CSSProperties type check for PropsType
    "react/forbid-prop-types": ["error", { "forbid": ["any", "array"] }],
    // React prop-types should off to avoid stop compiler
    // already using typescript no need to yell error on this rule
    "react/prop-types": "off",
    // Yelling error on this rule is extremely strict IMO
    "react/jsx-props-no-spreading": "warn",

    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    // Don"t know why it"s trigger in react without any error in editor turn into warn to avoid stop compile
    // Note that this rule still a best practice and must sure that
    // remove any warn about this rule right away.
    "@typescript-eslint/no-unsafe-return": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/no-explicit-any": "off",

    // Storybook should not be listed in dependencies
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [".storybook/**", "**/*.stories.tsx"]
      }
    ],
    // Fix error on absolute path with custom prefix ~ or @
    // https://github.com/benmosher/eslint-plugin-import/issues/1573
    "import/extensions": [
      "error",
      {
        "js": "never",
        "jsx": "never",
        "ts": "never",
        "tsx": "never"
      }
    ],
    // Absolute src path is ordered same as normal relative path
    "import/order": [
      "error",
      {
        "pathGroups": [
          {
            "pattern": "@/**",
            "group": "internal",
            "position": "after"
          }
        ],
        "pathGroupsExcludedImportTypes": ["builtin", "object"]
      }
    ],
    // No need to use error on this rule
    "import/prefer-default-export": "warn",

    "react/no-unescaped-entities": ["warn"]
	}
}